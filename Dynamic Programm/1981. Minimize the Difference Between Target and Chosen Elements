class Solution {
public:
    vector<vector<int>> dp;
    
    int fun(vector<vector<int>> & mat,int row,int sum,int target)
    {
        if(row==mat.size()){
            
            return abs(target-sum);
        }
        if(dp[row][sum]!=-1)return dp[row][sum];
        
        int ans=INT_MAX;
        for(int i=0;i<mat[row].size();i++)
        {
            ans=min(ans,fun(mat,row+1,sum+mat[row][i],target));
            if(sum+mat[row][i]>target)break;  // (1st line) to remove TLE. Here if sum>target then it won't run for the remaining elements of row.
        }
        return dp[row][sum]=ans;
    }
    
    int minimizeTheDifference(vector<vector<int>>& mat, int t) {
        int n=mat.size();
        int m=mat[0].size();
        for(int i=0;i<n;i++)
            sort(mat[i].begin(),mat[i].end());    //for successful working of 1st line (see above in function)
        
        dp.resize(71,vector<int>(4901,-1)); //using constraints given
        
        return fun(mat,0,0,t);
    }
};
